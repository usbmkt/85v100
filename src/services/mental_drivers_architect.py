#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Mental Drivers Architect
Arquiteto de Drivers Mentais Customizados
"""

import time
import random
import logging
import json
from typing import Dict, List, Any, Optional
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class MentalDriversArchitect:
    """Arquiteto de Drivers Mentais Customizados"""
    
    def __init__(self):
        """Inicializa o arquiteto"""
        self.ai_manager = ai_manager
        logger.info("Mental Drivers Architect inicializado")
    
    def generate_custom_mental_drivers(self, context_data: Dict[str, Any], avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera drivers mentais customizados"""
        try:
            logger.info("üß† Gerando drivers mentais customizados")
            
            # Drivers b√°sicos sempre inclu√≠dos
            basic_drivers = {
                "urgencia": {
                    "nome": "Urg√™ncia",
                    "descricao": "Cria sensa√ß√£o de que a oportunidade √© limitada no tempo",
                    "aplicacao": "Oferta por tempo limitado com countdown vis√≠vel"
                },
                "escassez": {
                    "nome": "Escassez",
                    "descricao": "Destaca a limita√ß√£o de quantidade ou disponibilidade",
                    "aplicacao": "Apenas X vagas dispon√≠veis"
                },
                "autoridade": {
                    "nome": "Autoridade",
                    "descricao": "Demonstra expertise e credibilidade",
                    "aplicacao": "Depoimentos de especialistas e certifica√ß√µes"
                },
                "prova_social": {
                    "nome": "Prova Social",
                    "descricao": "Mostra que outros j√° fizeram e tiveram sucesso",
                    "aplicacao": "Cases de clientes reais com resultados"
                }
            }
            
            return {
                "status": "sucesso",
                "drivers_customizados": basic_drivers,
                "total_drivers": len(basic_drivers)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar drivers mentais: {e}")
            salvar_erro("drivers_mentais", e, {"context": context_data})
            return {
                "status": "erro",
                "drivers_customizados": {},
                "total_drivers": 0
            }

# Inst√¢ncia global
mental_drivers_architect = MentalDriversArchitect()

class MentalDriversArchitect:
    """Arquiteto de Drivers Mentais Customizados"""
    
    def __init__(self):
        """Inicializa o arquiteto de drivers mentais"""
        self.universal_drivers = self._load_universal_drivers()
        self.driver_templates = self._load_driver_templates()
        
        logger.info("Mental Drivers Architect inicializado")
    
    def _load_universal_drivers(self) -> Dict[str, Dict[str, Any]]:
        """Carrega os 19 drivers mentais universais completos"""
        return {
            # DRIVERS EMOCIONAIS PRIM√ÅRIOS
            'ferida_exposta': {
                'nome': 'Ferida Exposta',
                'gatilho_central': 'Dor n√£o resolvida',
                'definicao_visceral': 'Trazer √† consci√™ncia o que foi reprimido',
                'mecanica_psicologica': 'Ativa sistema l√≠mbico de alerta e urg√™ncia',
                'ativacao': 'Voc√™ ainda [comportamento doloroso] mesmo sabendo que [consequ√™ncia]?',
                'categoria': 'emocional_primario'
            },
            'trofeu_secreto': {
                'nome': 'Trof√©u Secreto',
                'gatilho_central': 'Desejo inconfess√°vel',
                'definicao_visceral': 'Validar ambi√ß√µes "proibidas"',
                'mecanica_psicologica': 'Libera dopamina atrav√©s de permiss√£o social',
                'ativacao': 'N√£o √© sobre dinheiro, √© sobre [desejo real oculto]',
                'categoria': 'emocional_primario'
            },
            'inveja_produtiva': {
                'nome': 'Inveja Produtiva',
                'gatilho_central': 'Compara√ß√£o com pares',
                'definicao_visceral': 'Transformar inveja em combust√≠vel',
                'mecanica_psicologica': 'Converte energia negativa em motiva√ß√£o de a√ß√£o',
                'ativacao': 'Enquanto voc√™ [situa√ß√£o atual], outros como voc√™ [resultado desejado]',
                'categoria': 'emocional_primario'
            },
            'relogio_psicologico': {
                'nome': 'Rel√≥gio Psicol√≥gico',
                'gatilho_central': 'Urg√™ncia existencial',
                'definicao_visceral': 'Tempo como recurso finito e em escassez',
                'mecanica_psicologica': 'Ativa cortisol de urg√™ncia temporal',
                'ativacao': 'Quantos [per√≠odo] voc√™ ainda vai [desperd√≠cio]?',
                'categoria': 'emocional_primario'
            },
            'identidade_aprisionada': {
                'nome': 'Identidade Aprisionada',
                'gatilho_central': 'Conflito entre quem √© e quem poderia ser',
                'definicao_visceral': 'Expor a m√°scara social limitante',
                'mecanica_psicologica': 'Cria disson√¢ncia cognitiva for√ßando mudan√ßa',
                'ativacao': 'Voc√™ n√£o √© [r√≥tulo limitante], voc√™ √© [potencial real]',
                'categoria': 'emocional_primario'
            },
            'custo_invisivel': {
                'nome': 'Custo Invis√≠vel',
                'gatilho_central': 'Perda n√£o percebida',
                'definicao_visceral': 'Quantificar o pre√ßo da ina√ß√£o',
                'mecanica_psicologica': 'Torna perdas abstratas em dor concreta',
                'ativacao': 'Cada dia sem [solu√ß√£o] custa [perda espec√≠fica]',
                'categoria': 'emocional_primario'
            },
            'ambicao_expandida': {
                'nome': 'Ambi√ß√£o Expandida',
                'gatilho_central': 'Sonhos pequenos demais',
                'definicao_visceral': 'Elevar o teto mental de possibilidades',
                'mecanica_psicologica': 'Expande neuroplasticidade de vis√£o de futuro',
                'ativacao': 'Se o esfor√ßo √© o mesmo, por que voc√™ est√° pedindo t√£o pouco?',
                'categoria': 'emocional_primario'
            },
            'diagnostico_brutal': {
                'nome': 'Diagn√≥stico Brutal',
                'gatilho_central': 'Confronto com a realidade atual',
                'definicao_visceral': 'Criar indigna√ß√£o produtiva com status quo',
                'mecanica_psicologica': 'Quebra nega√ß√£o atrav√©s de evid√™ncia irrefut√°vel',
                'ativacao': 'Olhe seus n√∫meros/situa√ß√£o. At√© quando voc√™ vai aceitar isso?',
                'categoria': 'emocional_primario'
            },
            'ambiente_vampiro': {
                'nome': 'Ambiente Vampiro',
                'gatilho_central': 'Consci√™ncia do entorno t√≥xico',
                'definicao_visceral': 'Revelar como ambiente atual suga energia/potencial',
                'mecanica_psicologica': 'Identifica drenos externos de energia',
                'ativacao': 'Seu ambiente te impulsiona ou te mant√©m pequeno?',
                'categoria': 'emocional_primario'
            },
            'mentor_salvador': {
                'nome': 'Mentor Salvador',
                'gatilho_central': 'Necessidade de orienta√ß√£o externa',
                'definicao_visceral': 'Ativar desejo por figura de autoridade que acredita neles',
                'mecanica_psicologica': 'Ativa circuito neurol√≥gico de busca por prote√ß√£o',
                'ativacao': 'Voc√™ precisa de algu√©m que veja seu potencial quando voc√™ n√£o consegue',
                'categoria': 'emocional_primario'
            },
            'coragem_necessaria': {
                'nome': 'Coragem Necess√°ria',
                'gatilho_central': 'Medo paralisante disfar√ßado',
                'definicao_visceral': 'Transformar desculpas em decis√µes corajosas',
                'mecanica_psicologica': 'Converte adrenalina do medo em a√ß√£o',
                'ativacao': 'N√£o √© sobre condi√ß√µes perfeitas, √© sobre decidir apesar do medo',
                'categoria': 'emocional_primario'
            },
            
            # DRIVERS RACIONAIS COMPLEMENTARES
            'mecanismo_revelado': {
                'nome': 'Mecanismo Revelado',
                'gatilho_central': 'Compreens√£o do "como"',
                'definicao_visceral': 'Desmistificar o complexo',
                'mecanica_psicologica': 'Ativa c√≥rtex pr√©-frontal de compreens√£o',
                'ativacao': '√â simplesmente [analogia simples], n√£o [complica√ß√£o percebida]',
                'categoria': 'racional_complementar'
            },
            'prova_matematica': {
                'nome': 'Prova Matem√°tica',
                'gatilho_central': 'Certeza num√©rica',
                'definicao_visceral': 'Equa√ß√£o irrefut√°vel',
                'mecanica_psicologica': 'Satisfaz necessidade de l√≥gica do c√©rebro racional',
                'ativacao': 'Se voc√™ fizer X por Y dias = Resultado Z garantido',
                'categoria': 'racional_complementar'
            },
            'padrao_oculto': {
                'nome': 'Padr√£o Oculto',
                'gatilho_central': 'Insight revelador',
                'definicao_visceral': 'Mostrar o que sempre esteve l√°',
                'mecanica_psicologica': 'Cria momento "eureka" de descoberta',
                'ativacao': 'Todos que conseguiram [resultado] fizeram [padr√£o espec√≠fico]',
                'categoria': 'racional_complementar'
            },
            'excecao_possivel': {
                'nome': 'Exce√ß√£o Poss√≠vel',
                'gatilho_central': 'Quebra de limita√ß√£o',
                'definicao_visceral': 'Provar que regras podem ser quebradas',
                'mecanica_psicologica': 'Expande limites de cren√ßa sobre possibilidades',
                'ativacao': 'Diziam que [limita√ß√£o], mas [prova contr√°ria]',
                'categoria': 'racional_complementar'
            },
            'atalho_etico': {
                'nome': 'Atalho √âtico',
                'gatilho_central': 'Efici√™ncia sem culpa',
                'definicao_visceral': 'Validar o caminho mais r√°pido',
                'mecanica_psicologica': 'Remove culpa social de buscar facilidade',
                'ativacao': 'Por que sofrer [tempo longo] se existe [atalho comprovado]?',
                'categoria': 'racional_complementar'
            },
            'decisao_binaria': {
                'nome': 'Decis√£o Bin√°ria',
                'gatilho_central': 'Simplifica√ß√£o radical',
                'definicao_visceral': 'Eliminar zona cinzenta',
                'mecanica_psicologica': 'For√ßa circuito de decis√£o atrav√©s de simplicidade',
                'ativacao': 'Ou voc√™ [a√ß√£o desejada] ou aceita [consequ√™ncia dolorosa]',
                'categoria': 'racional_complementar'
            },
            'oportunidade_oculta': {
                'nome': 'Oportunidade Oculta',
                'gatilho_central': 'Vantagem n√£o percebida',
                'definicao_visceral': 'Revelar demanda/chance √≥bvia mas ignorada',
                'mecanica_psicologica': 'Ativa sistema de recompensa por descoberta',
                'ativacao': 'O mercado est√° gritando por [solu√ß√£o] e ningu√©m est√° ouvindo',
                'categoria': 'racional_complementar'
            },
            'metodo_vs_sorte': {
                'nome': 'M√©todo vs Sorte',
                'gatilho_central': 'Caos vs sistema',
                'definicao_visceral': 'Contrastar tentativa aleat√≥ria com caminho estruturado',
                'mecanica_psicologica': 'Ativa prefer√™ncia neurol√≥gica por ordem e previsibilidade',
                'ativacao': 'Sem m√©todo voc√™ est√° cortando mata com foice. Com m√©todo, est√° na autoestrada',
                'categoria': 'racional_complementar'
            }
        }
    
    def _load_driver_templates(self) -> Dict[str, str]:
        """Carrega templates expandidos de drivers"""
        return {
            'historia_analogia': 'Era uma vez {personagem} que enfrentava {problema_similar}. Depois de {tentativas_fracassadas}, descobriu que {solucao_especifica} e conseguiu {resultado_transformador}.',
            'metafora_visual': 'Imagine {situacao_atual} como {metafora_visual}. Agora visualize {situacao_ideal} como {metafora_transformada}.',
            'comando_acao': 'Agora que voc√™ {compreensao_adquirida}, a √∫nica a√ß√£o l√≥gica √© {acao_especifica} porque {consequencia_inevitavel}.',
            
            # TEMPLATES AVAN√áADOS
            'pergunta_ferida': 'Voc√™ ainda {comportamento_doloroso} mesmo sabendo que {consequencia_terrivel}?',
            'confronto_brutal': 'Deixa eu te fazer uma pergunta dif√≠cil sobre {area_vida}...',
            'calculo_perda': 'Cada {periodo_tempo} sem {solucao} = {perda_quantificada} perdidos para sempre',
            'comparacao_cruel': 'Enquanto voc√™ {situacao_atual_pat√©tica}, outros como voc√™ {resultado_invejavel}',
            'urgencia_temporal': 'Quantos {periodo} voc√™ ainda vai {desperdicio} antes de {acao_necessaria}?',
            'identidade_expandida': 'Voc√™ n√£o √© {rotulo_limitante}, voc√™ √© {potencial_real_gigante}',
            'ambiente_toxico': 'Seu {ambiente_especifico} te impulsiona ou te mant√©m {limitacao}?',
            'mentor_necessario': 'Voc√™ precisa de algu√©m que {apoio_especifico} quando voc√™ {momento_fraqueza}',
            'coragem_vs_desculpa': 'N√£o √© sobre {condicao_perfeita}, √© sobre {decisao_corajosa}',
            'mecanismo_simples': '√â simplesmente {analogia_simples}, n√£o {complicacao_falsa}',
            'prova_numerica': 'Se voc√™ {acao_X} por {tempo_Y} = {resultado_Z} matematicamente garantido',
            'padrao_universal': 'TODOS que conseguiram {resultado_desejado} fizeram {padrao_especifico}',
            'quebra_regra': 'Diziam que {limitacao_aceita}, mas {prova_contraria_irrefutavel}',
            'atalho_validado': 'Por que {sofrimento_longo} se existe {caminho_rapido_comprovado}?',
            'binario_radical': 'Ou voc√™ {acao_desejada} AGORA ou aceita {consequencia_dolorosa} para sempre',
            'chance_invisivel': 'O mercado est√° GRITANDO por {solucao} e ningu√©m est√° OUVINDO',
            'sistema_vs_caos': 'Sem m√©todo = {metafora_caos}. Com m√©todo = {metafora_autoestrada}'
        }
    
    def generate_complete_drivers_system(
        self, 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Gera sistema completo de drivers mentais customizados"""
        
        # Valida√ß√£o e corre√ß√£o de entrada
        if not avatar_data:
            logger.warning("‚ö†Ô∏è Dados do avatar ausentes, criando avatar b√°sico")
            avatar_data = self._create_basic_avatar(context_data)
        
        if not context_data.get('segmento'):
            logger.warning("‚ö†Ô∏è Segmento n√£o informado, usando padr√£o")
            context_data['segmento'] = 'Neg√≥cios'
        
        try:
            logger.info("üß† Gerando drivers mentais customizados...")
            
            # Salva dados de entrada imediatamente
            salvar_etapa("drivers_entrada", {
                "avatar_data": avatar_data,
                "context_data": context_data
            }, categoria="drivers_mentais")
            
            # Analisa avatar para identificar drivers ideais
            ideal_drivers = self._identify_ideal_drivers(avatar_data, context_data)
            
            # Gera drivers customizados
            customized_drivers = self._generate_customized_drivers(ideal_drivers, avatar_data, context_data)
            
            if not customized_drivers:
                logger.error("‚ùå Falha na gera√ß√£o de drivers customizados")
                # Usa fallback em vez de falhar
                logger.warning("üîÑ Usando drivers b√°sicos como fallback")
                customized_drivers = self._generate_fallback_drivers_system(context_data)
            
            # Salva drivers customizados
            salvar_etapa("drivers_customizados", customized_drivers, categoria="drivers_mentais")
            
            # Cria roteiros de ativa√ß√£o
            activation_scripts = self._create_activation_scripts(customized_drivers, avatar_data)
            
            # Gera frases de ancoragem
            anchor_phrases = self._generate_anchor_phrases(customized_drivers, avatar_data)
            
            result = {
                'drivers_customizados': customized_drivers,
                'roteiros_ativacao': activation_scripts,
                'frases_ancoragem': anchor_phrases,
                'drivers_universais_utilizados': [d['nome'] for d in ideal_drivers],
                'personalizacao_nivel': self._calculate_personalization_level(customized_drivers),
                'validation_status': 'VALID',
                'generation_timestamp': time.time()
            }
            
            # Salva resultado final imediatamente
            salvar_etapa("drivers_final", result, categoria="drivers_mentais")
            
            logger.info("‚úÖ Drivers mentais customizados gerados com sucesso")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar drivers mentais: {str(e)}")
            salvar_erro("drivers_sistema", e, contexto={"segmento": context_data.get('segmento')})
            
            # Fallback para sistema b√°sico em caso de erro
            logger.warning("üîÑ Gerando drivers b√°sicos como fallback...")
            return self._generate_fallback_drivers_system(context_data)
    
    def _identify_ideal_drivers(self, avatar_data: Dict[str, Any], context_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Identifica drivers ideais baseado no avatar e contexto expandido"""
        
        ideal_drivers = []
        
        # Analisa dores para identificar drivers prim√°rios
        dores = avatar_data.get('dores_viscerais', [])
        desejos = avatar_data.get('desejos_ocultos', [])
        objecoes = avatar_data.get('objecoes_principais', [])
        
        # DRIVERS EMOCIONAIS PRIM√ÅRIOS baseados em dores
        if any(word in ' '.join(dores).lower() for word in ['tempo', 'pressa', 'urgente', 'prazo']):
            ideal_drivers.append(self.universal_drivers['relogio_psicologico'])
        
        if any(word in ' '.join(dores).lower() for word in ['sozinho', 'perdido', 'confuso', 'orienta√ß√£o']):
            ideal_drivers.append(self.universal_drivers['mentor_salvador'])
        
        if any(word in ' '.join(dores).lower() for word in ['fracasso', 'tentativa', 'erro', 'frustra√ß√£o']):
            ideal_drivers.append(self.universal_drivers['ferida_exposta'])
        
        if any(word in ' '.join(dores).lower() for word in ['ambiente', 'pessoas', 'c√≠rculo', 'negativo']):
            ideal_drivers.append(self.universal_drivers['ambiente_vampiro'])
        
        if any(word in ' '.join(dores).lower() for word in ['resultado', 'estagnado', 'parado', 'mesmo']):
            ideal_drivers.append(self.universal_drivers['diagnostico_brutal'])
        
        # DRIVERS RACIONAIS baseados em obje√ß√µes
        if any(word in ' '.join(objecoes).lower() for word in ['dinheiro', 'caro', 'investimento', 'pre√ßo']):
            ideal_drivers.append(self.universal_drivers['custo_invisivel'])
        
        if any(word in ' '.join(objecoes).lower() for word in ['sozinho', 'consegue', 'tentativa', 'm√©todo']):
            ideal_drivers.append(self.universal_drivers['metodo_vs_sorte'])
        
        if any(word in ' '.join(objecoes).lower() for word in ['confian√ßa', 'prova', 'funciona', 'verdade']):
            ideal_drivers.append(self.universal_drivers['prova_matematica'])
        
        # DRIVERS DE DESEJO baseados em aspira√ß√µes
        if any(word in ' '.join(desejos).lower() for word in ['reconhecimento', 'autoridade', 'expert', 'refer√™ncia']):
            ideal_drivers.append(self.universal_drivers['identidade_aprisionada'])
        
        if any(word in ' '.join(desejos).lower() for word in ['liberdade', 'automa√ß√£o', 'sistema', 'escal√°vel']):
            ideal_drivers.append(self.universal_drivers['atalho_etico'])
        
        # DRIVERS UNIVERSAIS SEMPRE IMPORTANTES
        essential_drivers = [
            'ambicao_expandida',
            'decisao_binaria', 
            'oportunidade_oculta',
            'coragem_necessaria'
        ]
        
        for driver_key in essential_drivers:
            if driver_key in self.universal_drivers:
                ideal_drivers.append(self.universal_drivers[driver_key])
        
        # Remove duplicatas mantendo ordem
        seen = set()
        unique_drivers = []
        for driver in ideal_drivers:
            driver_id = driver.get('nome', '')
            if driver_id not in seen:
                seen.add(driver_id)
                unique_drivers.append(driver)
        
        return unique_drivers[:12]  # M√°ximo 12 drivers para o algoritmo
    
    def _generate_customized_drivers(
        self, 
        ideal_drivers: List[Dict[str, Any]], 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """Gera arsenal massivo de drivers customizados usando IA"""
        
        try:
            segmento = context_data.get('segmento', 'neg√≥cios')
            produto = context_data.get('produto', 'produto/servi√ßo')
            
            # PROMPT MASSIVO PARA 19+ DRIVERS
            prompt = f"""
Voc√™ √© o ARQUITETO SUPREMO DE DRIVERS MENTAIS. Crie um ARSENAL MASSIVO de 15-20 drivers mentais customizados para {segmento}.

CONTEXTO CR√çTICO:
- Segmento: {segmento}
- Produto: {produto}
- Avatar: {json.dumps(avatar_data, indent=2, ensure_ascii=False)[:1500]}

OS 19 DRIVERS UNIVERSAIS COMO BASE:
{json.dumps(list(self.universal_drivers.keys()), indent=2, ensure_ascii=False)}

INSTRU√á√ïES BRUTAIS:
1. Crie M√çNIMO 15 drivers, M√ÅXIMO 20
2. Use os 19 universais como base mas CUSTOMIZE TUDO
3. Cada driver deve ser √öNICO, VISCERAL e ESPEC√çFICO para {segmento}
4. Inclua drivers emocionais prim√°rios E racionais complementares
5. Foque nas dores mais profundas do avatar
6. Hist√≥rias devem ter 200+ palavras e ser ESPEC√çFICAS
7. Frases de ancoragem devem ser MEMOR√ÅVEIS
8. Cada driver deve atacar uma obje√ß√£o ou instalar uma cren√ßa

RETORNE APENAS JSON V√ÅLIDO:

```json
[
  {{
    "nome": "Nome Impactante (m√°x 3 palavras)",
    "gatilho_central": "Emo√ß√£o ou l√≥gica core espec√≠fica",
    "definicao_visceral": "1-2 frases que capturam ess√™ncia",
    "mecanica_psicologica": "Como funciona no c√©rebro",
    "categoria": "emocional_primario|racional_complementar",
    "momento_instalacao": "Quando plantar durante jornada",
    "roteiro_ativacao": {{
      "pergunta_abertura": "Pergunta que exp√µe ferida espec√≠fica",
      "historia_analogia": "Hist√≥ria DETALHADA de 200+ palavras espec√≠fica para {segmento}",
      "metafora_visual": "Met√°fora visual poderosa e memor√°vel",
      "comando_acao": "Comando espec√≠fico que direciona comportamento"
    }},
    "frases_ancoragem": [
      "Frase 1 memor√°vel e repet√≠vel",
      "Frase 2 que reativa o driver",
      "Frase 3 que intensifica tens√£o",
      "Frase 4 que ancora na mem√≥ria",
      "Frase 5 que for√ßa a√ß√£o"
    ],
    "prova_logica": "Dados/fatos espec√≠ficos que sustentam",
    "loop_reforco": "Como reativar em momentos posteriores",
    "objecao_destruida": "Que obje√ß√£o espec√≠fica este driver neutraliza",
    "nivel_intensidade": "baixa|media|alta|maxima"
  }}
]
```

COMECE GERANDO O ARSENAL COMPLETO AGORA!
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=4000)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    drivers = json.loads(clean_response)
                    if isinstance(drivers, list) and len(drivers) >= 10:
                        logger.info(f"‚úÖ Arsenal de {len(drivers)} drivers customizados gerado com IA")
                        return drivers
                    else:
                        logger.warning(f"‚ö†Ô∏è IA retornou apenas {len(drivers) if isinstance(drivers, list) else 0} drivers")
                except json.JSONDecodeError as e:
                    logger.warning(f"‚ö†Ô∏è IA retornou JSON inv√°lido: {str(e)}")
            
            # Fallback para arsenal expandido
            return self._create_expanded_drivers_arsenal(context_data)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar arsenal de drivers: {str(e)}")
            return self._create_expanded_drivers_arsenal(context_data)
    
    def _create_expanded_drivers_arsenal(self, context_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Cria arsenal expandido de drivers como fallback robusto"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        produto = context_data.get('produto', 'solu√ß√£o')
        
        return [
            # DRIVERS EMOCIONAIS PRIM√ÅRIOS
            {
                'nome': 'Ferida Exposta',
                'gatilho_central': f'Dor n√£o resolvida em {segmento}',
                'definicao_visceral': f'Trazer √† consci√™ncia problemas reprimidos de {segmento}',
                'mecanica_psicologica': 'Ativa sistema l√≠mbico de alerta',
                'categoria': 'emocional_primario',
                'roteiro_ativacao': {
                    'pergunta_abertura': f'Voc√™ ainda est√° lutando com {segmento} mesmo sabendo que est√° perdendo tempo e dinheiro?',
                    'historia_analogia': f'Conheci um profissional de {segmento} que fingiu por 2 anos que estava tudo bem. Trabalhava dobrado, dormia mal, brigava em casa. Quando finalmente admitiu que precisava de ajuda, descobriu que o problema n√£o era falta de esfor√ßo, era falta de estrat√©gia. Em 90 dias reorganizou tudo e recuperou sua vida pessoal.',
                    'metafora_visual': f'√â como ter uma infec√ß√£o e fingir que √© s√≥ um arranh√£o. Quanto mais ignora, mais spread.',
                    'comando_acao': f'Pare de fingir que est√° tudo bem em {segmento} e encare a realidade'
                },
                'frases_ancoragem': [
                    f'Problemas ignorados em {segmento} n√£o desaparecem, se multiplicam',
                    'Admitir o problema √© o primeiro passo para a solu√ß√£o',
                    'Fingir que est√° tudo bem √© o caminho para o colapso'
                ],
                'prova_logica': f'85% dos fracassos em {segmento} come√ßam com nega√ß√£o da realidade',
                'objecao_destruida': 'Minimiza√ß√£o de problemas',
                'nivel_intensidade': 'alta'
            },
            {
                'nome': 'Rel√≥gio Psicol√≥gico',
                'gatilho_central': 'Urg√™ncia temporal existencial',
                'definicao_visceral': 'Cada momento perdido √© oportunidade que n√£o volta',
                'mecanica_psicologica': 'Ativa cortisol de urg√™ncia temporal',
                'categoria': 'emocional_primario',
                'roteiro_ativacao': {
                    'pergunta_abertura': f'Quantos anos voc√™ ainda vai desperdi√ßar tentando resolver {segmento} sozinho?',
                    'historia_analogia': f'Tem um cara que conhe√ßo, inteligente, esfor√ßado, sempre "planejando" entrar s√©rio em {segmento}. 2018: "Ano que vem eu foco nisso". 2019: "Agora n√£o d√°, tenho outras prioridades". 2020: pandemia atrapalhou. 2021: "ainda n√£o √© o momento". 2024: ainda na mesma. Agora olha pros mais novos que come√ßaram depois dele e j√° passaram na frente. O tempo n√£o perdoa procrastina√ß√£o.',
                    'metafora_visual': '√â como um trem que passa na sua esta√ß√£o uma vez por ano. Voc√™ fica sempre "se preparando" para o pr√≥ximo, mas nunca sobe.',
                    'comando_acao': f'Suba no trem de {segmento} AGORA ou aceite ficar para tr√°s'
                },
                'frases_ancoragem': [
                    'Tempo perdido nunca volta',
                    'Enquanto voc√™ planeja, outros executam',
                    'Procrastina√ß√£o √© o assassino silencioso dos sonhos',
                    'Cada dia adiado √© um dia que seus concorrentes ganham vantagem'
                ],
                'prova_logica': 'Profissionais que agem imediatamente t√™m 340% mais chances de sucesso',
                'objecao_destruida': 'Procrastina√ß√£o e "n√£o √© o momento"',
                'nivel_intensidade': 'maxima'
            },
            {
                'nome': 'Diagn√≥stico Brutal',
                'gatilho_central': 'Confronto implac√°vel com realidade',
                'definicao_visceral': 'Destruir ilus√µes confort√°veis com fatos cru√©is',
                'mecanica_psicologica': 'Quebra nega√ß√£o atrav√©s de evid√™ncia irrefut√°vel',
                'categoria': 'emocional_primario',
                'roteiro_ativacao': {
                    'pergunta_abertura': f'Voc√™ tem coragem de ver seus n√∫meros reais em {segmento}?',
                    'historia_analogia': f'Atendi um empres√°rio que insistia que estava "indo bem" em {segmento}. Quando fizemos a an√°lise real: 60% dos leads perdidos por falta de follow-up, 30% de margem jogada fora por desorganiza√ß√£o, 40h semanais desperdi√ßadas em tarefas que poderiam ser automatizadas. R$ 50 mil por m√™s vazando por furos b√°sicos. Quando viu os n√∫meros na tela, quebrou. "Como eu fui cego por tanto tempo?" Mas s√≥ depois de aceitar a realidade brutal conseguiu consertar.',
                    'metafora_visual': '√â como estar numa casa pegando fogo e insistir que √© s√≥ o aquecedor ligado.',
                    'comando_acao': f'Encare seus n√∫meros reais em {segmento} e pare de se iludir'
                },
                'frases_ancoragem': [
                    'N√∫meros n√£o mentem, pessoas sim',
                    'Autoengano √© o luxo mais caro que existe',
                    'A verdade d√≥i, mas a ilus√£o mata',
                    'Realidade ignorada se torna trag√©dia anunciada'
                ],
                'prova_logica': '73% das pessoas superestimam sua performance real em 200%',
                'objecao_destruida': 'Autoengano e minimiza√ß√£o de problemas',
                'nivel_intensidade': 'maxima'
            },
            {
                'nome': 'Ambiente Vampiro',
                'gatilho_central': 'Consci√™ncia de energia sendo sugada',
                'definicao_visceral': 'Revelar como ambiente atual drena potencial',
                'mecanica_psicologica': 'Identifica drenos externos de energia vital',
                'categoria': 'emocional_primario',
                'roteiro_ativacao': {
                    'pergunta_abertura': f'Quantas pessoas ao seu redor realmente querem seu sucesso em {segmento}?',
                    'historia_analogia': f'Cliente meu vivia cercado de "amigos" que sempre tinham uma desculpa para desencorajar. "N√£o √© o momento", "muito arriscado", "voc√™ j√° est√° bem". Quando come√ßou a crescer em {segmento}, virou alvo de ironia sutil, coment√°rios √°cidos disfar√ßados de "preocupa√ß√£o". Percebeu que estava num c√≠rculo de med√≠ocres que se sentia amea√ßado pelo seu sucesso. Mudou de c√≠rculo social, cortou vampiros energ√©ticos, se cercou de gente que puxa para cima. Resultado: crescimento exponencial em 6 meses.',
                    'metafora_visual': '√â como tentar subir numa escada rolante que est√° descendo. Por mais que voc√™ corra, o ambiente te puxa para baixo.',
                    'comando_acao': f'Corte vampiros energ√©ticos e cerque-se de quem apoia seu crescimento em {segmento}'
                },
                'frases_ancoragem': [
                    'Voc√™ √© a m√©dia das 5 pessoas com quem mais convive',
                    'Ambiente med√≠ocre produz resultados med√≠ocres',
                    'Vampiros energ√©ticos sugam seu potencial',
                    'Mude o ambiente ou ele mudar√° voc√™'
                ],
                'prova_logica': 'Pessoas em ambientes de alta performance t√™m 5x mais chance de sucesso',
                'objecao_destruida': 'Influ√™ncias negativas do c√≠rculo social',
                'nivel_intensidade': 'alta'
            },
            {
                'nome': 'M√©todo vs Sorte',
                'gatilho_central': 'Sistema estruturado vs tentativa aleat√≥ria',
                'definicao_visceral': 'Contrastar caos da improvisa√ß√£o com poder do m√©todo',
                'mecanica_psicologica': 'Ativa prefer√™ncia neurol√≥gica por ordem',
                'categoria': 'racional_complementar',
                'roteiro_ativacao': {
                    'pergunta_abertura': f'Voc√™ est√° tentando "dar um jeito" em {segmento} ou seguindo um m√©todo comprovado?',
                    'historia_analogia': f'Dois caras come√ßaram no mesmo dia em {segmento}. Jo√£o ficou "tentando", seguindo dicas aleat√≥rias do YouTube, mudando estrat√©gia a cada semana, reinventando a roda. Pedro seguiu um m√©todo estruturado, passo a passo, mesmo quando parecia "lento". Depois de 1 ano: Jo√£o ainda estava quebrando a cabe√ßa com problemas b√°sicos, Pedro j√° era refer√™ncia no mercado. A diferen√ßa? Jo√£o cortava mato com foice, Pedro pegou a autoestrada.',
                    'metafora_visual': 'Tentar sem m√©todo √© como cozinhar sem receita. Pode dar certo... ou virar desastre.',
                    'comando_acao': f'Pare de improvisar em {segmento} e siga um m√©todo comprovado'
                },
                'frases_ancoragem': [
                    'M√©todo elimina tentativa e erro',
                    'Improviso √© luxo para quem j√° domina o b√°sico',
                    'Sistema funciona mesmo quando voc√™ n√£o est√° funcionando',
                    'Sorte √© para quem n√£o tem m√©todo'
                ],
                'prova_logica': 'Metodologia reduz tempo para resultado em 75%',
                'objecao_destruida': 'Tentativa de fazer sozinho sem estrutura',
                'nivel_intensidade': 'media'
            },
            {
                'nome': 'Decis√£o Bin√°ria',
                'gatilho_central': 'Elimina√ß√£o radical de zona cinzenta',
                'definicao_visceral': 'For√ßar escolha entre duas √∫nicas op√ß√µes',
                'mecanica_psicologica': 'For√ßa circuito de decis√£o atrav√©s de simplicidade',
                'categoria': 'racional_complementar',
                'roteiro_ativacao': {
                    'pergunta_abertura': f'Voc√™ vai dominar {segmento} nos pr√≥ximos 6 meses ou vai aceitar ficar na mediocridade para sempre?',
                    'historia_analogia': f'Cliente chegou pra mim totalmente perdido em {segmento}. Milh√µes de "talvez", "possivelmente", "vou pensar". Coloquei na parede: "Ou voc√™ decide HOJE que vai ser um expert em {segmento} ou aceita que vai ser med√≠ocre para sempre. N√£o existe meio termo." Sil√™ncio de 30 segundos. "Quero ser expert." Pronto. Decis√£o tomada. 8 meses depois estava dando consultoria para grandes empresas.',
                    'metafora_visual': '√â como estar na borda de um abismo. Ou voc√™ pula para o outro lado ou volta. Ficar na borda n√£o √© op√ß√£o.',
                    'comando_acao': f'DECIDA AGORA: expert em {segmento} ou med√≠ocre para sempre'
                },
                'frases_ancoragem': [
                    'N√£o existem meio-termos para o sucesso',
                    'Indecis√£o √© decis√£o de fracassar',
                    'Ou voc√™ escolhe ou a vida escolhe por voc√™',
                    'Zona cinzenta √© zona de derrota'
                ],
                'prova_logica': 'Pessoas que tomam decis√µes bin√°rias t√™m 60% mais chance de sucesso',
                'objecao_destruida': 'Indecis√£o e procrastina√ß√£o',
                'nivel_intensidade': 'maxima'
            }
            # ... mais drivers ser√£o adicionados automaticamente
        ]
    
    def _create_activation_scripts(self, drivers: List[Dict[str, Any]], avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria roteiros de ativa√ß√£o para cada driver"""
        
        scripts = {}
        
        for driver in drivers:
            driver_name = driver.get('nome', 'Driver')
            roteiro = driver.get('roteiro_ativacao', {})
            
            scripts[driver_name] = {
                'abertura': roteiro.get('pergunta_abertura', ''),
                'desenvolvimento': roteiro.get('historia_analogia', ''),
                'fechamento': roteiro.get('comando_acao', ''),
                'tempo_estimado': '3-5 minutos',
                'intensidade': 'Alta'
            }
        
        return scripts
    
    def _generate_anchor_phrases(self, drivers: List[Dict[str, Any]], avatar_data: Dict[str, Any]) -> Dict[str, List[str]]:
        """Gera frases de ancoragem para cada driver"""
        
        anchor_phrases = {}
        
        for driver in drivers:
            driver_name = driver.get('nome', 'Driver')
            frases = driver.get('frases_ancoragem', [])
            
            if frases:
                anchor_phrases[driver_name] = frases
            else:
                # Frases padr√£o
                anchor_phrases[driver_name] = [
                    f"Este √© o momento de ativar {driver_name}",
                    f"Voc√™ sente o impacto de {driver_name}",
                    f"Agora {driver_name} faz sentido para voc√™"
                ]
        
        return anchor_phrases
    
    def _calculate_personalization_level(self, drivers: List[Dict[str, Any]]) -> str:
        """Calcula n√≠vel de personaliza√ß√£o dos drivers"""
        
        if not drivers:
            return "Baixo"
        
        # Verifica se tem hist√≥rias espec√≠ficas
        has_stories = sum(1 for d in drivers if len(d.get('roteiro_ativacao', {}).get('historia_analogia', '')) > 100)
        
        # Verifica se tem frases de ancoragem
        has_anchors = sum(1 for d in drivers if len(d.get('frases_ancoragem', [])) >= 3)
        
        personalization_score = (has_stories + has_anchors) / (len(drivers) * 2)
        
        if personalization_score >= 0.8:
            return "Alto"
        elif personalization_score >= 0.5:
            return "M√©dio"
        else:
            return "Baixo"
    
    def _create_basic_avatar(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria avatar b√°sico quando n√£o h√° dados dispon√≠veis"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        produto = context_data.get('produto', 'produto/servi√ßo')
        
        return {
            'dores_viscerais': [
                f"Dificuldade para se destacar no mercado de {segmento}",
                f"Falta de estrat√©gia clara para {produto}",
                "Resultados inconsistentes e imprevis√≠veis",
                "Concorr√™ncia acirrada e diferencia√ß√£o dif√≠cil",
                "Falta de autoridade no mercado"
            ],
            'desejos_ocultos': [
                f"Ser reconhecido como autoridade em {segmento}",
                "Ter liberdade financeira e temporal",
                "Impactar positivamente a vida das pessoas",
                "Construir um legado duradouro",
                "Ter clientes disputando para trabalhar comigo"
            ],
            'objecoes_principais': [
                "N√£o tenho tempo suficiente",
                "O investimento √© alto demais",
                "Meu caso √© espec√≠fico demais",
                "J√° tentei outras coisas sem sucesso",
                "Preciso de mais garantias"
            ],
            'feridas_abertas_inconfessaveis': [
                f"Sente que est√° desperdi√ßando potencial em {segmento}",
                "Tem medo de nunca conseguir se destacar realmente",
                "Sente inveja dos concorrentes que t√™m sucesso",
                "Tem vergonha dos resultados atuais"
            ],
            'sonhos_proibidos_ardentes': [
                f"Dominar completamente o mercado de {segmento}",
                "Ter clientes disputando para trabalhar comigo",
                "Ser procurado pela m√≠dia como especialista",
                "Ter renda passiva substancial"
            ]
        }

    def _generate_fallback_drivers_system(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera sistema de drivers b√°sico como fallback"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        
        fallback_drivers = self._create_expanded_drivers_arsenal(context_data)
        
        return {
            'drivers_customizados': fallback_drivers,
            'roteiros_ativacao': {
                driver['nome']: {
                    'abertura': driver['roteiro_ativacao']['pergunta_abertura'],
                    'desenvolvimento': driver['roteiro_ativacao']['historia_analogia'],
                    'fechamento': driver['roteiro_ativacao']['comando_acao'],
                    'tempo_estimado': '3-5 minutos'
                } for driver in fallback_drivers
            },
            'frases_ancoragem': {
                driver['nome']: driver['frases_ancoragem'] for driver in fallback_drivers
            },
            'validation_status': 'FALLBACK_VALID',
            'generation_timestamp': time.time(),
            'fallback_mode': True
        }

# Inst√¢ncia global
mental_drivers_architect = MentalDriversArchitect()